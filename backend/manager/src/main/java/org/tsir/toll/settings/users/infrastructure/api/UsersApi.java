/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.tsir.toll.settings.users.infrastructure.api;

import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.tsir.common.api.ApiMessage;
import org.tsir.toll.settings.users.domain.dto.AuthenticationDTO;
import org.tsir.toll.settings.users.domain.dto.ContactDTO;
import org.tsir.toll.settings.users.domain.dto.EnrollmentDTO;
import org.tsir.toll.settings.users.domain.dto.UserDTO;
import org.tsir.toll.settings.users.domain.dto.UserDetailDTO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-09-18T01:57:31.631Z[GMT]")
@Validated
public interface UsersApi {

	@Operation(summary = "Consultar usuarios", description = "Obtener la lista de usarios de acuerdo a los filtros establecidos.", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Usuarios" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserDTO.class)))),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/users", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<UserDTO>> findUsers(
			@Parameter(in = ParameterIn.QUERY, description = "Llaves de los criterios de búsqueda.  Enumeración de las posibles llaves:  * `CODE` - Codigo del usuario.  * `FIRSTNAME` - Nombre del usuario.  * `LASTNAME` - Apellido del usuario.  * `STATE` - Estado del usuario.  * `PROFILE` - Código del perfil del usuario.  * `TOLL` - Código de la estación del usuario. ", schema = @Schema()) @Valid @RequestParam(value = "filter", required = false) Map<String, String> filter,
			@Parameter(in = ParameterIn.QUERY, description = "Parámetros de paginado. Enumeración de las posibles propiedades:  * `INDEX` - Número de página de resultados.  * `SIZE` - Tamaño de la página de resultados - Mínimo 5, Máximo 100.", schema = @Schema()) @Valid @RequestParam(value = "paging", required = false) Map<String, Integer> paging,
			@Parameter(in = ParameterIn.QUERY, description = "Parámetros de ordenamiento de resultados. Enumeración de las posibles propiedades:  * `FIELD` - Campo de ordenamiento de los resultados de acuerdo a las llaves anteriores.  * `ORDER` - Especificación del orden de resultados ASC-DESC.", schema = @Schema()) @Valid @RequestParam(value = "sorting", required = false) Map<String, String> sorting);

	@Operation(summary = "Detalles de usuario", description = "Obtiene la información detallada de un usuario.", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Usuarios" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserDetailDTO.class))),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/users/{code}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<UserDetailDTO> getUser(
			@Parameter(in = ParameterIn.PATH, description = "Parametro de codigo generel de identificación de un recurso.", required = true, schema = @Schema()) @PathVariable("code") Long code);

	@Operation(summary = "Inicio de sesión.", description = "Operacion que permite recibir las credenciales para autenticación de los usuarios registrados para la plataforma VIAL+. ", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Usuarios" })
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Autenticación correcta "),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/users/login", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> login(
			@Parameter(in = ParameterIn.DEFAULT, description = "Datos de las credenciales de autenticación.", required = true, schema = @Schema()) @Valid @RequestBody AuthenticationDTO body);

	@Operation(summary = "Fin de sesión.", description = "Realiza la notificación para finalizar la sesión del usuario, invalidando el token para posteriores peticiones. ", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Usuarios" })
	@ApiResponses(value = { @ApiResponse(responseCode = "204", description = "Fin de sesión correcto "),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/users/logout", produces = { "application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Void> logout();

	@Operation(summary = "Registrar usuario", description = "Solicitud de creación de un usuario en el sistema.", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Usuarios" })
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Usuario registrado satisfactoriamente."),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/users", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> registerUser(
			@Parameter(in = ParameterIn.DEFAULT, description = "Información requerida del usuario.", required = true, schema = @Schema()) @Valid @RequestBody UserDTO body);

	@Operation(summary = "Actualizar datos de autenticación de usuario.", description = "Solicitud de modificación de los valores de las opciones de autenticación de un usuario.", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Usuarios" })
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Actualización satisfactoria."),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/users/{code}/authentication", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> updateAuthentication(
			@Parameter(in = ParameterIn.PATH, description = "Parametro de codigo generel de identificación de un recurso.", required = true, schema = @Schema()) @PathVariable("code") Long code,
			@Parameter(in = ParameterIn.DEFAULT, description = "Datos de autenticacion a modificar del usuario.", required = true, schema = @Schema()) @Valid @RequestBody AuthenticationDTO body);

	@Operation(summary = "Actualizar datos de contacto de usuario.", description = "Solicitud de modificación de los valores de los datos de contacto de un usuario.", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Usuarios" })
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Actualización satisfactoria."),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/users/{code}/contact", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> updateContact(
			@Parameter(in = ParameterIn.PATH, description = "Parametro de codigo generel de identificación de un recurso.", required = true, schema = @Schema()) @PathVariable("code") Long code,
			@Parameter(in = ParameterIn.DEFAULT, description = "Datos de contacto a modificar del usuario.", required = true, schema = @Schema()) @Valid @RequestBody ContactDTO body);

	@Operation(summary = "Actualizar datos de enrolamiento de usuario.", description = "Solicitud de modificación de asiganción de perfil y/o estación de un usuario.", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Usuarios" })
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Actualización satisfactoria."),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/users/{code}/enrollment", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> updateEnrollment(
			@Parameter(in = ParameterIn.PATH, description = "Parametro de codigo generel de identificación de un recurso.", required = true, schema = @Schema()) @PathVariable("code") Long code,
			@Parameter(in = ParameterIn.DEFAULT, description = "Datos de enrolamiento a modificar del usuario.", required = true, schema = @Schema()) @Valid @RequestBody EnrollmentDTO body);

	@Operation(summary = "Actualizar información de usuario", description = "Solicitud de modificación de información de usuario.", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Usuarios" })
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Usuario modificado correctamente"),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/users/{code}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> updateUser(
			@Parameter(in = ParameterIn.PATH, description = "Parametro de codigo generel de identificación de un recurso.", required = true, schema = @Schema()) @PathVariable("code") Long code,
			@Parameter(in = ParameterIn.DEFAULT, description = "Datos del usuario a modificar.", required = true, schema = @Schema()) @Valid @RequestBody UserDTO body);

}
